#include <QTRSensors.h>
#include <BlynkSimpleEsp32.h>
#include <WiFi.h>
#include <PubSubClient.h>

// Motor pinnen
const int enaPin = 15;
const int in1Pin = 2;
const int in2Pin = 23;
const int in3Pin = 22;
const int in4Pin = 21;
const int enbPin = 33;

// Lijnvolgparameters
const int lineThreshold = 3500; // Pas deze drempelwaarde indien nodig aan
const int whiteThreshold = 2000; // Drempelwaarde voor witte kruispunten
const int maxSpeed = 170;       // Pas de maximale motorsnelheid indien nodig aan
const float Kp = 0.2;           // Proportionele constante
const float Ki = 0;             // Integratieconstante
const float Kd = 0.1;           // Afgeleide constante

QTRSensors qtr;

const uint8_t SensorCount = 8;
uint16_t sensorValues[SensorCount];

char auth[] = "YourAuthToken";
char ssid[] = "ssid";
char password[] = "pass";

bool isOffLine = false;
bool isWhiteIntersection = false;
unsigned long stopTime = 0;

int lastError = 0;
int integral = 0;

WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);

void setupWiFi()
{
  // Verbind met WiFi-netwerk
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(1000);
    Serial.println("Verbinden met WiFi...");
  }
  Serial.println("WiFi verbonden");
}

void setupMQTT()
{
  // Verbind met MQTT-broker
  mqttClient.setServer("your_mqtt_broker_address", 1883);
  mqttClient.connect("ESP32Client", "your_mqtt_username", "your_mqtt_password");
  while (!mqttClient.connected())
  {
    delay(1000);
    Serial.println("Verbinden met MQTT-broker...");
  }
  Serial.println("MQTT-broker verbonden");
}

void sendMQTTMessage(const char *message)
{
  // Verzend MQTT-bericht
  mqttClient.publish("car/white_intersection", message);
  Serial.println("MQTT-bericht verzonden: ");
  Serial.println(message);
}

void setup()
{
  // Configureer de sensoren
  qtr.setTypeRC();
  qtr.setSensorPins((const uint8_t[]){13, 12, 14, 27, 26, 25, 5, 18}, SensorCount);
  qtr.setEmitterPin(2);
  Blynk.begin(auth, ssid, password);

  // Configureer motorpinnen als uitgangen
  pinMode(enaPin, OUTPUT);
  pinMode(in1Pin, OUTPUT);
  pinMode(in2Pin, OUTPUT);
  pinMode(enbPin, OUTPUT);
  pinMode(in3Pin, OUTPUT);
  pinMode(in4Pin, OUTPUT);

  // Start seriÃ«le communicatie
  Serial.begin(9600);

  // Verbind met WiFi-netwerk
  setupWiFi();

  // Verbind met MQTT-broker
  setupMQTT();
}

void loop()
{
  // Lees sensorwaarden
  qtr.read(sensorValues);

  // Bepaal positie van de lijn
  int position = qtr.readLineBlack(sensorValues);

  // Bereken fout en update integratie
  int error = position - 3500; // Pas de middenpositie indien nodig aan
  integral += error;

  // Bereken PID-componenten
  int proportional = error;
  int derivative = error - lastError;

  // Bereken motorsnelheden op basis van PID-regeling
  int motorSpeedA = maxSpeed + Kp * proportional + Ki * integral + Kd * derivative;
  int motorSpeedB = maxSpeed - Kp * proportional - Ki * integral - Kd * derivative;

  // Begrens motorsnelheden binnen het bereik van 0 tot maxSpeed
  motorSpeedA = constrain(motorSpeedA, 0, maxSpeed);
  motorSpeedB = constrain(motorSpeedB, 0, maxSpeed);

  // Controleer of de auto van de lijn is of niet
  if (position > lineThreshold || position < -lineThreshold)
  {
    if (!isOffLine)
    {
      // Zet rode LED aan
      digitalWrite(ledPin, HIGH);

      // Stuur bericht naar Blynk
      Blynk.virtualWrite(V1, HIGH); // Zet de virtuele LED op pin V1 aan
      isOffLine = true;             // Zet de vlag om herhaalde meldingen te voorkomen
    }
  }
  else
  {
    if (isOffLine)
    {
      // Zet rode LED uit
      digitalWrite(ledPin, LOW);

      // Stuur bericht naar Blynk
      Blynk.virtualWrite(V1, LOW); // Zet de virtuele LED op pin V1 uit
      isOffLine = false;           // Reset de vlag
    }
  }

  // Controleer of de auto gestopt is bij een wit kruispunt
  if (position > -whiteThreshold && position < whiteThreshold)
  {
    if (!isWhiteIntersection)
    {
      // Zet gele LED aan
      digitalWrite(ledPin, HIGH);

      // Stuur MQTT-bericht
      sendMQTTMessage("Car stopped at white intersection");

      isWhiteIntersection = true; // Zet de vlag om herhaalde meldingen te voorkomen
      stopTime = millis();        // Sla de huidige tijd op
    }
    else
    {
      // Controleer de tijd dat de auto gestopt is bij een wit kruispunt
      unsigned long currentTime = millis();
      if (currentTime - stopTime >= 5000) // Wacht 5 seconden voordat de auto weer gaat rijden
      {
        isWhiteIntersection = false; // Reset de vlag
        digitalWrite(ledPin, LOW);   // Zet gele LED uit
      }
    }
  }

  // Stel motorrichtingen en -snelheden in
  if (position > lineThreshold)
  {
    // Draai naar links
    digitalWrite(in1Pin, HIGH);
    digitalWrite(in2Pin, LOW);
    analogWrite(enaPin, motorSpeedA);

    digitalWrite(in3Pin, LOW);
    digitalWrite(in4Pin, LOW);
    analogWrite(enbPin, motorSpeedB);
  }
  else if (position < lineThreshold)
  {
    // Draai naar rechts
    digitalWrite(in1Pin, LOW);
    digitalWrite(in2Pin, LOW);
    analogWrite(enaPin, motorSpeedA);

    digitalWrite(in3Pin, HIGH);
    digitalWrite(in4Pin, LOW);
    analogWrite(enbPin, motorSpeedB);
  }
  else
  {
    // Ga rechtuit
    digitalWrite(in1Pin, HIGH);
    digitalWrite(in2Pin, LOW);
    analogWrite(enaPin, maxSpeed);

    digitalWrite(in3Pin, HIGH);
    digitalWrite(in4Pin, LOW);
    analogWrite(enbPin, maxSpeed);
  }

  // Print sensorwaarden en motorsnelheden
  for (uint8_t i = 0; i < SensorCount; i++)
  {
    Serial.print(sensorValues[i]);
    Serial.print('\t');
  }
  Serial.print("Positie: ");
  Serial.print(position);
  Serial.print('\t');
  Serial.print("Motorsnelheden: ");
  Serial.print(motorSpeedA);
  Serial.print(", ");
  Serial.print(motorSpeedB);
  Serial.println();

  // Update de laatste fout voor de volgende iteratie
  lastError = error;

  delay(50); // Pas de vertraging indien nodig aan
}
